//
// FilmsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class FilmsAPI {

    /**
     получить сиквелы и приквелы для фильма по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [FilmSequelsAndPrequelsResponse]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV21FilmsIdSequelsAndPrequelsGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> [FilmSequelsAndPrequelsResponse] {
        return try await apiV21FilmsIdSequelsAndPrequelsGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить сиквелы и приквелы для фильма по kinopoisk film id
     - GET /api/v2.1/films/{id}/sequels_and_prequels
     - tbd
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[FilmSequelsAndPrequelsResponse]> 
     */
    open class func apiV21FilmsIdSequelsAndPrequelsGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<[FilmSequelsAndPrequelsResponse]> {
        var localVariablePath = "/api/v2.1/films/{id}/sequels_and_prequels"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FilmSequelsAndPrequelsResponse]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить список фильмов по ключевым словам
     
     - parameter keyword: (query) ключивые слова для поиска 
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: FilmSearchResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV21FilmsSearchByKeywordGet(keyword: String, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> FilmSearchResponse {
        return try await apiV21FilmsSearchByKeywordGetWithRequestBuilder(keyword: keyword, page: page, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список фильмов по ключевым словам
     - GET /api/v2.1/films/search-by-keyword
     - Возвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов.
     - parameter keyword: (query) ключивые слова для поиска 
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FilmSearchResponse> 
     */
    open class func apiV21FilmsSearchByKeywordGetWithRequestBuilder(keyword: String, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<FilmSearchResponse> {
        let localVariablePath = "/api/v2.1/films/search-by-keyword"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "keyword": (wrappedValue: keyword.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FilmSearchResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_apiV22FilmsCollectionsGet: String, Sendable, CaseIterable {
        case topPopularAll = "TOP_POPULAR_ALL"
        case topPopularMovies = "TOP_POPULAR_MOVIES"
        case top250TvShows = "TOP_250_TV_SHOWS"
        case top250Movies = "TOP_250_MOVIES"
        case vampireTheme = "VAMPIRE_THEME"
        case comicsTheme = "COMICS_THEME"
        case closesReleases = "CLOSES_RELEASES"
        case family = "FAMILY"
        case oskarWinners2021 = "OSKAR_WINNERS_2021"
        case loveTheme = "LOVE_THEME"
        case zombieTheme = "ZOMBIE_THEME"
        case catastropheTheme = "CATASTROPHE_THEME"
        case kidsAnimationTheme = "KIDS_ANIMATION_THEME"
        case popularSeries = "POPULAR_SERIES"
    }

    /**
     получить список фильмов из различных топов или коллекций. Например https://www.kinopoisk.ru/top/lists/58/
     
     - parameter type: (query) тип топа или коллекции (optional, default to .topPopularAll)
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: FilmCollectionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsCollectionsGet(page: Int? = nil,type: ModelType_apiV22FilmsCollectionsGet? = nil,  apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> FilmCollectionResponse {
        return try await apiV22FilmsCollectionsGetWithRequestBuilder(type: type, page: page, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список фильмов из различных топов или коллекций. Например https://www.kinopoisk.ru/top/lists/58/
     - GET /api/v2.2/films/collections
     - Возвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов.
     - parameter type: (query) тип топа или коллекции (optional, default to .topPopularAll)
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FilmCollectionResponse> 
     */
    open class func apiV22FilmsCollectionsGetWithRequestBuilder(type: ModelType_apiV22FilmsCollectionsGet? = nil, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<FilmCollectionResponse> {
        let localVariablePath = "/api/v2.2/films/collections"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FilmCollectionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить id стран и жанров для использования в /api/v2.2/films
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: FiltersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsFiltersGet(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> FiltersResponse {
        return try await apiV22FilmsFiltersGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить id стран и жанров для использования в /api/v2.2/films
     - GET /api/v2.2/films/filters
     - Возвращает список id стран и жанров, которые могут быть использованы в /api/v2.2/films
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FiltersResponse> 
     */
    open class func apiV22FilmsFiltersGetWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<FiltersResponse> {
        let localVariablePath = "/api/v2.2/films/filters"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FiltersResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter order
     */
    public enum Order_apiV22FilmsGet: String, Sendable, CaseIterable {
        case rating = "RATING"
        case numVote = "NUM_VOTE"
        case year = "YEAR"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_apiV22FilmsGet: String, Sendable, CaseIterable {
        case film = "FILM"
        case tvShow = "TV_SHOW"
        case tvSeries = "TV_SERIES"
        case miniSeries = "MINI_SERIES"
        case all = "ALL"
    }

    /**
     получить список фильмов по различным фильтрам
     
     - parameter countries: (query) список id стран разделенные запятой. Например &lt;i&gt;countries&#x3D;1,2,3&lt;/i&gt;. На данный момент можно указать не более одной страны. (optional)
     - parameter genres: (query) список id жанров разделенные запятой. Например &lt;i&gt;genres&#x3D;1,2,3&lt;/i&gt;. На данный момент можно указать не более одного жанра. (optional)
     - parameter order: (query) сортировка (optional, default to .rating)
     - parameter type: (query) тип фильма (optional, default to .all)
     - parameter ratingFrom: (query) минимальный рейтинг (optional)
     - parameter ratingTo: (query) максимальный рейтинг (optional)
     - parameter yearFrom: (query) минимальный год (optional)
     - parameter yearTo: (query) максимальный год (optional)
     - parameter imdbId: (query) imdb id (optional)
     - parameter keyword: (query) ключевое слово, которое встречается в названии фильма (optional)
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: FilmSearchByFiltersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsGet(countries: [Int]? = nil, genres: [Int]? = nil, order: Order_apiV22FilmsGet? = nil, type: ModelType_apiV22FilmsGet? = nil, ratingFrom: Double? = nil, ratingTo: Double? = nil, yearFrom: Int? = nil, yearTo: Int? = nil, imdbId: String? = nil, keyword: String? = nil, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> FilmSearchByFiltersResponse {
        return try await apiV22FilmsGetWithRequestBuilder(countries: countries, genres: genres, order: order, type: type, ratingFrom: ratingFrom, ratingTo: ratingTo, yearFrom: yearFrom, yearTo: yearTo, imdbId: imdbId, keyword: keyword, page: page, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список фильмов по различным фильтрам
     - GET /api/v2.2/films
     - Возвращает список фильмов с пагинацией. Каждая страница содержит не более чем 20 фильмов. Данный эндпоинт не возращает более 400 фильмов. <i>Используй /api/v2.2/films/filters чтобы получить id стран и жанров.</i>
     - parameter countries: (query) список id стран разделенные запятой. Например &lt;i&gt;countries&#x3D;1,2,3&lt;/i&gt;. На данный момент можно указать не более одной страны. (optional)
     - parameter genres: (query) список id жанров разделенные запятой. Например &lt;i&gt;genres&#x3D;1,2,3&lt;/i&gt;. На данный момент можно указать не более одного жанра. (optional)
     - parameter order: (query) сортировка (optional, default to .rating)
     - parameter type: (query) тип фильма (optional, default to .all)
     - parameter ratingFrom: (query) минимальный рейтинг (optional)
     - parameter ratingTo: (query) максимальный рейтинг (optional)
     - parameter yearFrom: (query) минимальный год (optional)
     - parameter yearTo: (query) максимальный год (optional)
     - parameter imdbId: (query) imdb id (optional)
     - parameter keyword: (query) ключевое слово, которое встречается в названии фильма (optional)
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FilmSearchByFiltersResponse> 
     */
    open class func apiV22FilmsGetWithRequestBuilder(countries: [Int]? = nil, genres: [Int]? = nil, order: Order_apiV22FilmsGet? = nil, type: ModelType_apiV22FilmsGet? = nil, ratingFrom: Double? = nil, ratingTo: Double? = nil, yearFrom: Int? = nil, yearTo: Int? = nil, imdbId: String? = nil, keyword: String? = nil, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<FilmSearchByFiltersResponse> {
        let localVariablePath = "/api/v2.2/films"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countries": (wrappedValue: countries?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "genres": (wrappedValue: genres?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ratingFrom": (wrappedValue: ratingFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "ratingTo": (wrappedValue: ratingTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "yearFrom": (wrappedValue: yearFrom?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "yearTo": (wrappedValue: yearTo?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "imdbId": (wrappedValue: imdbId?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "keyword": (wrappedValue: keyword?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FilmSearchByFiltersResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить данные о наградах фильма по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AwardResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdAwardsGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AwardResponse {
        return try await apiV22FilmsIdAwardsGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить данные о наградах фильма по kinopoisk film id
     - GET /api/v2.2/films/{id}/awards
     - Данный эндпоинт возвращает данные о наградах и премиях фильма.
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AwardResponse> 
     */
    open class func apiV22FilmsIdAwardsGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AwardResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/awards"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AwardResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить данные о бюджете и сборах фильма по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: BoxOfficeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdBoxOfficeGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> BoxOfficeResponse {
        return try await apiV22FilmsIdBoxOfficeGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить данные о бюджете и сборах фильма по kinopoisk film id
     - GET /api/v2.2/films/{id}/box_office
     - Данный эндпоинт возвращает данные о бюджете и сборах.
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<BoxOfficeResponse> 
     */
    open class func apiV22FilmsIdBoxOfficeGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<BoxOfficeResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/box_office"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BoxOfficeResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить данные о прокате фильма по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DistributionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdDistributionsGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> DistributionResponse {
        return try await apiV22FilmsIdDistributionsGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить данные о прокате фильма по kinopoisk film id
     - GET /api/v2.2/films/{id}/distributions
     - Данный эндпоинт возвращает данные о прокате в разных странах.
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DistributionResponse> 
     */
    open class func apiV22FilmsIdDistributionsGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<DistributionResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/distributions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DistributionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить список сайтов, где можно посмотреть фильм по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ExternalSourceResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdExternalSourcesGet(id: Int, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ExternalSourceResponse {
        return try await apiV22FilmsIdExternalSourcesGetWithRequestBuilder(id: id, page: page, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список сайтов, где можно посмотреть фильм по kinopoisk film id
     - GET /api/v2.2/films/{id}/external_sources
     - Возвращает список сайтов с пагинацией. Каждая страница содержит не более чем 20 рецензий.
     - parameter id: (path) kinopoisk film id 
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ExternalSourceResponse> 
     */
    open class func apiV22FilmsIdExternalSourcesGetWithRequestBuilder(id: Int, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ExternalSourceResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/external_sources"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalSourceResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить данные о фактах и ошибках в фильме по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: FactResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdFactsGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> FactResponse {
        return try await apiV22FilmsIdFactsGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить данные о фактах и ошибках в фильме по kinopoisk film id
     - GET /api/v2.2/films/{id}/facts
     - Данный эндпоинт возвращает список фактов и ошибок в фильме. <br> type - <b>FACT</b>, обозначает интересный факт о фильме. <br> type - <b>BLOOPER</b>, обозначает ошибку в фильме.
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FactResponse> 
     */
    open class func apiV22FilmsIdFactsGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<FactResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/facts"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FactResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить данные о фильме по kinopoisk id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Film
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> Film {
        return try await apiV22FilmsIdGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить данные о фильме по kinopoisk id
     - GET /api/v2.2/films/{id}
     - Данный эндпоинт возвращает базовые данные о фильме. Поле <b>lastSync</b> показывает дату последнего обновления данных.
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Film> 
     */
    open class func apiV22FilmsIdGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Film> {
        var localVariablePath = "/api/v2.2/films/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Film>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_apiV22FilmsIdImagesGet: String, Sendable, CaseIterable {
        case still = "STILL"
        case shooting = "SHOOTING"
        case poster = "POSTER"
        case fanArt = "FAN_ART"
        case promo = "PROMO"
        case concept = "CONCEPT"
        case wallpaper = "WALLPAPER"
        case cover = "COVER"
        case screenshot = "SCREENSHOT"
    }

    /**
     получить изображения(кадры, постеры, фан-арты, обои и т.д.) связанные с фильмом по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter type: (query) тип изображения (optional, default to .still)
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ImageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdImagesGet(id: Int, type: ModelType_apiV22FilmsIdImagesGet? = nil, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ImageResponse {
        return try await apiV22FilmsIdImagesGetWithRequestBuilder(id: id, type: type, page: page, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить изображения(кадры, постеры, фан-арты, обои и т.д.) связанные с фильмом по kinopoisk film id
     - GET /api/v2.2/films/{id}/images
     - Данный эндпоинт возвращает изображения связанные с фильмом с пагинацией.
     - parameter id: (path) kinopoisk film id 
     - parameter type: (query) тип изображения (optional, default to .still)
     - parameter page: (query) номер страницы (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ImageResponse> 
     */
    open class func apiV22FilmsIdImagesGetWithRequestBuilder(id: Int, type: ModelType_apiV22FilmsIdImagesGet? = nil, page: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ImageResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/images"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter order
     */
    public enum Order_apiV22FilmsIdReviewsGet: String, Sendable, CaseIterable {
        case dateAsc = "DATE_ASC"
        case dateDesc = "DATE_DESC"
        case userPositiveRatingAsc = "USER_POSITIVE_RATING_ASC"
        case userPositiveRatingDesc = "USER_POSITIVE_RATING_DESC"
        case userNegativeRatingAsc = "USER_NEGATIVE_RATING_ASC"
        case userNegativeRatingDesc = "USER_NEGATIVE_RATING_DESC"
    }

    /**
     получить список рецензии зрителей по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter page: (query) номер страницы (optional)
     - parameter order: (query) тип сортировки (optional, default to .dateDesc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ReviewResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdReviewsGet(id: Int, page: Int? = nil, order: Order_apiV22FilmsIdReviewsGet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ReviewResponse {
        return try await apiV22FilmsIdReviewsGetWithRequestBuilder(id: id, page: page, order: order, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список рецензии зрителей по kinopoisk film id
     - GET /api/v2.2/films/{id}/reviews
     - Возвращает список рецензии зрителей с пагинацией. Каждая страница содержит не более чем 20 рецензий.
     - parameter id: (path) kinopoisk film id 
     - parameter page: (query) номер страницы (optional)
     - parameter order: (query) тип сортировки (optional, default to .dateDesc)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ReviewResponse> 
     */
    open class func apiV22FilmsIdReviewsGetWithRequestBuilder(id: Int, page: Int? = nil, order: Order_apiV22FilmsIdReviewsGet? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ReviewResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/reviews"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReviewResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить данные о сезонах для сериала по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SeasonResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdSeasonsGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> SeasonResponse {
        return try await apiV22FilmsIdSeasonsGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить данные о сезонах для сериала по kinopoisk film id
     - GET /api/v2.2/films/{id}/seasons
     - Данный эндпоинт возвращает данные о сезонах для сериала.
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SeasonResponse> 
     */
    open class func apiV22FilmsIdSeasonsGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<SeasonResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/seasons"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeasonResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить список похожих фильмов по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RelatedFilmResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdSimilarsGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RelatedFilmResponse {
        return try await apiV22FilmsIdSimilarsGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список похожих фильмов по kinopoisk film id
     - GET /api/v2.2/films/{id}/similars
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RelatedFilmResponse> 
     */
    open class func apiV22FilmsIdSimilarsGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RelatedFilmResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/similars"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelatedFilmResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     получить трейлеры,тизеры,видео для фильма по kinopoisk film id
     
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VideoResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsIdVideosGet(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> VideoResponse {
        return try await apiV22FilmsIdVideosGetWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить трейлеры,тизеры,видео для фильма по kinopoisk film id
     - GET /api/v2.2/films/{id}/videos
     - Данный эндпоинт возвращает трейлеры,тизеры,видео для фильма по kinopoisk film id. 
     - parameter id: (path) kinopoisk film id 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VideoResponse> 
     */
    open class func apiV22FilmsIdVideosGetWithRequestBuilder(id: Int, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<VideoResponse> {
        var localVariablePath = "/api/v2.2/films/{id}/videos"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VideoResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter month
     */
    public enum Month_apiV22FilmsPremieresGet: String, Sendable, CaseIterable {
        case january = "JANUARY"
        case february = "FEBRUARY"
        case march = "MARCH"
        case april = "APRIL"
        case may = "MAY"
        case june = "JUNE"
        case july = "JULY"
        case august = "AUGUST"
        case september = "SEPTEMBER"
        case october = "OCTOBER"
        case november = "NOVEMBER"
        case december = "DECEMBER"
    }

    /**
     получить список кинопремьер
     
     - parameter year: (query) год релиза 
     - parameter month: (query) месяц релиза 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: PremiereResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func apiV22FilmsPremieresGet(year: Int, month: Month_apiV22FilmsPremieresGet, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> PremiereResponse {
        return try await apiV22FilmsPremieresGetWithRequestBuilder(year: year, month: month, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     получить список кинопремьер
     - GET /api/v2.2/films/premieres
     - Данный эндпоинт возвращает список кинопремьер. Например https://www.kinopoisk.ru/premiere/
     - parameter year: (query) год релиза 
     - parameter month: (query) месяц релиза 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<PremiereResponse> 
     */
    open class func apiV22FilmsPremieresGetWithRequestBuilder(year: Int, month: Month_apiV22FilmsPremieresGet, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<PremiereResponse> {
        let localVariablePath = "/api/v2.2/films/premieres"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "year": (wrappedValue: year.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "month": (wrappedValue: month.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PremiereResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
