//
// RelatedFilmResponseItems.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct RelatedFilmResponseItems: Sendable, Codable, JSONEncodable, Hashable {

    public enum RelationType: String, Sendable, Codable, CaseIterable {
        case similar = "SIMILAR"
    }
    public var filmId: Int?
    public var nameRu: String?
    public var nameEn: String?
    public var nameOriginal: String?
    public var posterUrl: String?
    public var posterUrlPreview: String?
    public var relationType: RelationType?

    public init(filmId: Int? = nil, nameRu: String? = nil, nameEn: String? = nil, nameOriginal: String? = nil, posterUrl: String? = nil, posterUrlPreview: String? = nil, relationType: RelationType? = nil) {
        self.filmId = filmId
        self.nameRu = nameRu
        self.nameEn = nameEn
        self.nameOriginal = nameOriginal
        self.posterUrl = posterUrl
        self.posterUrlPreview = posterUrlPreview
        self.relationType = relationType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filmId
        case nameRu
        case nameEn
        case nameOriginal
        case posterUrl
        case posterUrlPreview
        case relationType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filmId, forKey: .filmId)
        try container.encodeIfPresent(nameRu, forKey: .nameRu)
        try container.encodeIfPresent(nameEn, forKey: .nameEn)
        try container.encodeIfPresent(nameOriginal, forKey: .nameOriginal)
        try container.encodeIfPresent(posterUrl, forKey: .posterUrl)
        try container.encodeIfPresent(posterUrlPreview, forKey: .posterUrlPreview)
        try container.encodeIfPresent(relationType, forKey: .relationType)
    }
}

