//
// AwardPerson.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AwardPerson: Sendable, Codable, JSONEncodable, Hashable {

    public var kinopoiskId: Int
    public var webUrl: String
    public var nameRu: String?
    public var nameEn: String?
    public var sex: String
    public var posterUrl: String
    public var growth: Int?
    public var birthday: String?
    public var death: String?
    public var age: Int?
    public var birthplace: String?
    public var deathplace: String?
    public var profession: String?

    public init(kinopoiskId: Int, webUrl: String, nameRu: String?, nameEn: String?, sex: String, posterUrl: String, growth: Int?, birthday: String?, death: String?, age: Int?, birthplace: String?, deathplace: String?, profession: String?) {
        self.kinopoiskId = kinopoiskId
        self.webUrl = webUrl
        self.nameRu = nameRu
        self.nameEn = nameEn
        self.sex = sex
        self.posterUrl = posterUrl
        self.growth = growth
        self.birthday = birthday
        self.death = death
        self.age = age
        self.birthplace = birthplace
        self.deathplace = deathplace
        self.profession = profession
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case kinopoiskId
        case webUrl
        case nameRu
        case nameEn
        case sex
        case posterUrl
        case growth
        case birthday
        case death
        case age
        case birthplace
        case deathplace
        case profession
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(kinopoiskId, forKey: .kinopoiskId)
        try container.encode(webUrl, forKey: .webUrl)
        try container.encode(nameRu, forKey: .nameRu)
        try container.encode(nameEn, forKey: .nameEn)
        try container.encode(sex, forKey: .sex)
        try container.encode(posterUrl, forKey: .posterUrl)
        try container.encode(growth, forKey: .growth)
        try container.encode(birthday, forKey: .birthday)
        try container.encode(death, forKey: .death)
        try container.encode(age, forKey: .age)
        try container.encode(birthplace, forKey: .birthplace)
        try container.encode(deathplace, forKey: .deathplace)
        try container.encode(profession, forKey: .profession)
    }
}

