//
// StaffResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct StaffResponse: Sendable, Codable, JSONEncodable, Hashable {

    public enum ProfessionKey: String, Sendable, Codable, CaseIterable {
        case writer = "WRITER"
        case _operator = "OPERATOR"
        case editor = "EDITOR"
        case composer = "COMPOSER"
        case producerUssr = "PRODUCER_USSR"
        case translator = "TRANSLATOR"
        case director = "DIRECTOR"
        case design = "DESIGN"
        case producer = "PRODUCER"
        case actor = "ACTOR"
        case voiceDirector = "VOICE_DIRECTOR"
        case unknown = "UNKNOWN"
    }
    public var staffId: Int
    public var nameRu: String?
    public var nameEn: String?
    public var description: String?
    public var posterUrl: String
    public var professionText: String
    public var professionKey: ProfessionKey

    public init(staffId: Int, nameRu: String?, nameEn: String?, description: String?, posterUrl: String, professionText: String, professionKey: ProfessionKey) {
        self.staffId = staffId
        self.nameRu = nameRu
        self.nameEn = nameEn
        self.description = description
        self.posterUrl = posterUrl
        self.professionText = professionText
        self.professionKey = professionKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case staffId
        case nameRu
        case nameEn
        case description
        case posterUrl
        case professionText
        case professionKey
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(staffId, forKey: .staffId)
        try container.encode(nameRu, forKey: .nameRu)
        try container.encode(nameEn, forKey: .nameEn)
        try container.encode(description, forKey: .description)
        try container.encode(posterUrl, forKey: .posterUrl)
        try container.encode(professionText, forKey: .professionText)
        try container.encode(professionKey, forKey: .professionKey)
    }
}

