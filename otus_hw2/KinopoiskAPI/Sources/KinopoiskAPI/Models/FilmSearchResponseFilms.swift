//
// FilmSearchResponseFilms.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct FilmSearchResponseFilms: Sendable, Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Sendable, Codable, CaseIterable {
        case film = "FILM"
        case tvShow = "TV_SHOW"
        case video = "VIDEO"
        case miniSeries = "MINI_SERIES"
        case tvSeries = "TV_SERIES"
        case unknown = "UNKNOWN"
    }
    public var filmId: Int?
    public var nameRu: String?
    public var nameEn: String?
    public var type: ModelType?
    public var year: String?
    public var description: String?
    public var filmLength: String?
    public var countries: [Country]?
    public var genres: [Genre]?
    public var rating: String?
    public var ratingVoteCount: Int?
    public var posterUrl: String?
    public var posterUrlPreview: String?

    public init(filmId: Int? = nil, nameRu: String? = nil, nameEn: String? = nil, type: ModelType? = nil, year: String? = nil, description: String? = nil, filmLength: String? = nil, countries: [Country]? = nil, genres: [Genre]? = nil, rating: String? = nil, ratingVoteCount: Int? = nil, posterUrl: String? = nil, posterUrlPreview: String? = nil) {
        self.filmId = filmId
        self.nameRu = nameRu
        self.nameEn = nameEn
        self.type = type
        self.year = year
        self.description = description
        self.filmLength = filmLength
        self.countries = countries
        self.genres = genres
        self.rating = rating
        self.ratingVoteCount = ratingVoteCount
        self.posterUrl = posterUrl
        self.posterUrlPreview = posterUrlPreview
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filmId
        case nameRu
        case nameEn
        case type
        case year
        case description
        case filmLength
        case countries
        case genres
        case rating
        case ratingVoteCount
        case posterUrl
        case posterUrlPreview
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filmId, forKey: .filmId)
        try container.encodeIfPresent(nameRu, forKey: .nameRu)
        try container.encodeIfPresent(nameEn, forKey: .nameEn)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(filmLength, forKey: .filmLength)
        try container.encodeIfPresent(countries, forKey: .countries)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(ratingVoteCount, forKey: .ratingVoteCount)
        try container.encodeIfPresent(posterUrl, forKey: .posterUrl)
        try container.encodeIfPresent(posterUrlPreview, forKey: .posterUrlPreview)
    }
}

