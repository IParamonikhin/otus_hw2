//
// PersonResponseSpouses.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PersonResponseSpouses: Sendable, Codable, JSONEncodable, Hashable {

    public enum Sex: String, Sendable, Codable, CaseIterable {
        case male = "MALE"
        case female = "FEMALE"
    }
    public var personId: Int?
    public var name: String?
    public var divorced: Bool?
    public var divorcedReason: String?
    public var sex: Sex?
    public var children: Int?
    public var webUrl: String?
    public var relation: String?

    public init(personId: Int? = nil, name: String? = nil, divorced: Bool? = nil, divorcedReason: String? = nil, sex: Sex? = nil, children: Int? = nil, webUrl: String? = nil, relation: String? = nil) {
        self.personId = personId
        self.name = name
        self.divorced = divorced
        self.divorcedReason = divorcedReason
        self.sex = sex
        self.children = children
        self.webUrl = webUrl
        self.relation = relation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case personId
        case name
        case divorced
        case divorcedReason
        case sex
        case children
        case webUrl
        case relation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(personId, forKey: .personId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(divorced, forKey: .divorced)
        try container.encodeIfPresent(divorcedReason, forKey: .divorcedReason)
        try container.encodeIfPresent(sex, forKey: .sex)
        try container.encodeIfPresent(children, forKey: .children)
        try container.encodeIfPresent(webUrl, forKey: .webUrl)
        try container.encodeIfPresent(relation, forKey: .relation)
    }
}

