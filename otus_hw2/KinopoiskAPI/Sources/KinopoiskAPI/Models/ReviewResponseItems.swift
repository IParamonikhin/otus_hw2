//
// ReviewResponseItems.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ReviewResponseItems: Sendable, Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Sendable, Codable, CaseIterable {
        case positive = "POSITIVE"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case unknown = "UNKNOWN"
    }
    public var kinopoiskId: Int?
    public var type: ModelType?
    public var date: String?
    public var positiveRating: Int?
    public var negativeRating: Int?
    public var author: String?
    public var title: String?
    public var description: String?

    public init(kinopoiskId: Int? = nil, type: ModelType? = nil, date: String? = nil, positiveRating: Int? = nil, negativeRating: Int? = nil, author: String? = nil, title: String? = nil, description: String? = nil) {
        self.kinopoiskId = kinopoiskId
        self.type = type
        self.date = date
        self.positiveRating = positiveRating
        self.negativeRating = negativeRating
        self.author = author
        self.title = title
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case kinopoiskId
        case type
        case date
        case positiveRating
        case negativeRating
        case author
        case title
        case description
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(kinopoiskId, forKey: .kinopoiskId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(positiveRating, forKey: .positiveRating)
        try container.encodeIfPresent(negativeRating, forKey: .negativeRating)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
    }
}

