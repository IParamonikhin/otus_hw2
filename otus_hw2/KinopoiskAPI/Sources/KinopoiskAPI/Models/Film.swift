//
// Film.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Film: Sendable, Codable, JSONEncodable, Hashable {

    public enum ProductionStatus: String, Sendable, Codable, CaseIterable {
        case filming = "FILMING"
        case preProduction = "PRE_PRODUCTION"
        case completed = "COMPLETED"
        case announced = "ANNOUNCED"
        case unknown = "UNKNOWN"
        case postProduction = "POST_PRODUCTION"
    }
    public enum ModelType: String, Sendable, Codable, CaseIterable {
        case film = "FILM"
        case video = "VIDEO"
        case tvSeries = "TV_SERIES"
        case miniSeries = "MINI_SERIES"
        case tvShow = "TV_SHOW"
    }
    public var kinopoiskId: Int
    public var kinopoiskHDId: String?
    public var imdbId: String?
    public var nameRu: String?
    public var nameEn: String?
    public var nameOriginal: String?
    public var posterUrl: String
    public var posterUrlPreview: String
    public var coverUrl: String?
    public var logoUrl: String?
    public var reviewsCount: Int
    public var ratingGoodReview: Double?
    public var ratingGoodReviewVoteCount: Int?
    public var ratingKinopoisk: Double?
    public var ratingKinopoiskVoteCount: Int?
    public var ratingImdb: Double?
    public var ratingImdbVoteCount: Int?
    public var ratingFilmCritics: Double?
    public var ratingFilmCriticsVoteCount: Int?
    public var ratingAwait: Double?
    public var ratingAwaitCount: Int?
    public var ratingRfCritics: Double?
    public var ratingRfCriticsVoteCount: Int?
    public var webUrl: String
    public var year: Int?
    public var filmLength: Int?
    public var slogan: String?
    public var description: String?
    public var shortDescription: String?
    public var editorAnnotation: String?
    public var isTicketsAvailable: Bool
    public var productionStatus: ProductionStatus?
    public var type: ModelType
    public var ratingMpaa: String?
    public var ratingAgeLimits: String?
    public var hasImax: Bool?
    public var has3D: Bool?
    public var lastSync: String
    public var countries: [Country]
    public var genres: [Genre]
    public var startYear: Int?
    public var endYear: Int?
    public var serial: Bool?
    public var shortFilm: Bool?
    public var completed: Bool?

    public init(kinopoiskId: Int, kinopoiskHDId: String?, imdbId: String?, nameRu: String?, nameEn: String?, nameOriginal: String?, posterUrl: String, posterUrlPreview: String, coverUrl: String?, logoUrl: String?, reviewsCount: Int, ratingGoodReview: Double?, ratingGoodReviewVoteCount: Int?, ratingKinopoisk: Double?, ratingKinopoiskVoteCount: Int?, ratingImdb: Double?, ratingImdbVoteCount: Int?, ratingFilmCritics: Double?, ratingFilmCriticsVoteCount: Int?, ratingAwait: Double?, ratingAwaitCount: Int?, ratingRfCritics: Double?, ratingRfCriticsVoteCount: Int?, webUrl: String, year: Int?, filmLength: Int?, slogan: String?, description: String?, shortDescription: String?, editorAnnotation: String?, isTicketsAvailable: Bool, productionStatus: ProductionStatus?, type: ModelType, ratingMpaa: String?, ratingAgeLimits: String?, hasImax: Bool?, has3D: Bool?, lastSync: String, countries: [Country], genres: [Genre], startYear: Int?, endYear: Int?, serial: Bool? = nil, shortFilm: Bool? = nil, completed: Bool? = nil) {
        self.kinopoiskId = kinopoiskId
        self.kinopoiskHDId = kinopoiskHDId
        self.imdbId = imdbId
        self.nameRu = nameRu
        self.nameEn = nameEn
        self.nameOriginal = nameOriginal
        self.posterUrl = posterUrl
        self.posterUrlPreview = posterUrlPreview
        self.coverUrl = coverUrl
        self.logoUrl = logoUrl
        self.reviewsCount = reviewsCount
        self.ratingGoodReview = ratingGoodReview
        self.ratingGoodReviewVoteCount = ratingGoodReviewVoteCount
        self.ratingKinopoisk = ratingKinopoisk
        self.ratingKinopoiskVoteCount = ratingKinopoiskVoteCount
        self.ratingImdb = ratingImdb
        self.ratingImdbVoteCount = ratingImdbVoteCount
        self.ratingFilmCritics = ratingFilmCritics
        self.ratingFilmCriticsVoteCount = ratingFilmCriticsVoteCount
        self.ratingAwait = ratingAwait
        self.ratingAwaitCount = ratingAwaitCount
        self.ratingRfCritics = ratingRfCritics
        self.ratingRfCriticsVoteCount = ratingRfCriticsVoteCount
        self.webUrl = webUrl
        self.year = year
        self.filmLength = filmLength
        self.slogan = slogan
        self.description = description
        self.shortDescription = shortDescription
        self.editorAnnotation = editorAnnotation
        self.isTicketsAvailable = isTicketsAvailable
        self.productionStatus = productionStatus
        self.type = type
        self.ratingMpaa = ratingMpaa
        self.ratingAgeLimits = ratingAgeLimits
        self.hasImax = hasImax
        self.has3D = has3D
        self.lastSync = lastSync
        self.countries = countries
        self.genres = genres
        self.startYear = startYear
        self.endYear = endYear
        self.serial = serial
        self.shortFilm = shortFilm
        self.completed = completed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case kinopoiskId
        case kinopoiskHDId
        case imdbId
        case nameRu
        case nameEn
        case nameOriginal
        case posterUrl
        case posterUrlPreview
        case coverUrl
        case logoUrl
        case reviewsCount
        case ratingGoodReview
        case ratingGoodReviewVoteCount
        case ratingKinopoisk
        case ratingKinopoiskVoteCount
        case ratingImdb
        case ratingImdbVoteCount
        case ratingFilmCritics
        case ratingFilmCriticsVoteCount
        case ratingAwait
        case ratingAwaitCount
        case ratingRfCritics
        case ratingRfCriticsVoteCount
        case webUrl
        case year
        case filmLength
        case slogan
        case description
        case shortDescription
        case editorAnnotation
        case isTicketsAvailable
        case productionStatus
        case type
        case ratingMpaa
        case ratingAgeLimits
        case hasImax
        case has3D
        case lastSync
        case countries
        case genres
        case startYear
        case endYear
        case serial
        case shortFilm
        case completed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(kinopoiskId, forKey: .kinopoiskId)
        try container.encode(kinopoiskHDId, forKey: .kinopoiskHDId)
        try container.encode(imdbId, forKey: .imdbId)
        try container.encode(nameRu, forKey: .nameRu)
        try container.encode(nameEn, forKey: .nameEn)
        try container.encode(nameOriginal, forKey: .nameOriginal)
        try container.encode(posterUrl, forKey: .posterUrl)
        try container.encode(posterUrlPreview, forKey: .posterUrlPreview)
        try container.encode(coverUrl, forKey: .coverUrl)
        try container.encode(logoUrl, forKey: .logoUrl)
        try container.encode(reviewsCount, forKey: .reviewsCount)
        try container.encode(ratingGoodReview, forKey: .ratingGoodReview)
        try container.encode(ratingGoodReviewVoteCount, forKey: .ratingGoodReviewVoteCount)
        try container.encode(ratingKinopoisk, forKey: .ratingKinopoisk)
        try container.encode(ratingKinopoiskVoteCount, forKey: .ratingKinopoiskVoteCount)
        try container.encode(ratingImdb, forKey: .ratingImdb)
        try container.encode(ratingImdbVoteCount, forKey: .ratingImdbVoteCount)
        try container.encode(ratingFilmCritics, forKey: .ratingFilmCritics)
        try container.encode(ratingFilmCriticsVoteCount, forKey: .ratingFilmCriticsVoteCount)
        try container.encode(ratingAwait, forKey: .ratingAwait)
        try container.encode(ratingAwaitCount, forKey: .ratingAwaitCount)
        try container.encode(ratingRfCritics, forKey: .ratingRfCritics)
        try container.encode(ratingRfCriticsVoteCount, forKey: .ratingRfCriticsVoteCount)
        try container.encode(webUrl, forKey: .webUrl)
        try container.encode(year, forKey: .year)
        try container.encode(filmLength, forKey: .filmLength)
        try container.encode(slogan, forKey: .slogan)
        try container.encode(description, forKey: .description)
        try container.encode(shortDescription, forKey: .shortDescription)
        try container.encode(editorAnnotation, forKey: .editorAnnotation)
        try container.encode(isTicketsAvailable, forKey: .isTicketsAvailable)
        try container.encode(productionStatus, forKey: .productionStatus)
        try container.encode(type, forKey: .type)
        try container.encode(ratingMpaa, forKey: .ratingMpaa)
        try container.encode(ratingAgeLimits, forKey: .ratingAgeLimits)
        try container.encode(hasImax, forKey: .hasImax)
        try container.encode(has3D, forKey: .has3D)
        try container.encode(lastSync, forKey: .lastSync)
        try container.encode(countries, forKey: .countries)
        try container.encode(genres, forKey: .genres)
        try container.encode(startYear, forKey: .startYear)
        try container.encode(endYear, forKey: .endYear)
        try container.encodeIfPresent(serial, forKey: .serial)
        try container.encodeIfPresent(shortFilm, forKey: .shortFilm)
        try container.encodeIfPresent(completed, forKey: .completed)
    }
}

