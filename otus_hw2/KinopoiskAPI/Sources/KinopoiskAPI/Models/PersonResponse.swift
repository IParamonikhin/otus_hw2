//
// PersonResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PersonResponse: Sendable, Codable, JSONEncodable, Hashable {

    public enum Sex: String, Sendable, Codable, CaseIterable {
        case male = "MALE"
        case female = "FEMALE"
    }
    public var personId: Int
    public var webUrl: String?
    public var nameRu: String?
    public var nameEn: String?
    public var sex: Sex?
    public var posterUrl: String
    public var growth: String?
    public var birthday: String?
    public var death: String?
    public var age: Int?
    public var birthplace: String?
    public var deathplace: String?
    public var hasAwards: Int?
    public var profession: String?
    public var facts: [String]
    public var spouses: [PersonResponseSpouses]
    public var films: [PersonResponseFilms]

    public init(personId: Int, webUrl: String?, nameRu: String?, nameEn: String?, sex: Sex?, posterUrl: String, growth: String?, birthday: String?, death: String?, age: Int?, birthplace: String?, deathplace: String?, hasAwards: Int?, profession: String?, facts: [String], spouses: [PersonResponseSpouses], films: [PersonResponseFilms]) {
        self.personId = personId
        self.webUrl = webUrl
        self.nameRu = nameRu
        self.nameEn = nameEn
        self.sex = sex
        self.posterUrl = posterUrl
        self.growth = growth
        self.birthday = birthday
        self.death = death
        self.age = age
        self.birthplace = birthplace
        self.deathplace = deathplace
        self.hasAwards = hasAwards
        self.profession = profession
        self.facts = facts
        self.spouses = spouses
        self.films = films
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case personId
        case webUrl
        case nameRu
        case nameEn
        case sex
        case posterUrl
        case growth
        case birthday
        case death
        case age
        case birthplace
        case deathplace
        case hasAwards
        case profession
        case facts
        case spouses
        case films
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(personId, forKey: .personId)
        try container.encode(webUrl, forKey: .webUrl)
        try container.encode(nameRu, forKey: .nameRu)
        try container.encode(nameEn, forKey: .nameEn)
        try container.encode(sex, forKey: .sex)
        try container.encode(posterUrl, forKey: .posterUrl)
        try container.encode(growth, forKey: .growth)
        try container.encode(birthday, forKey: .birthday)
        try container.encode(death, forKey: .death)
        try container.encode(age, forKey: .age)
        try container.encode(birthplace, forKey: .birthplace)
        try container.encode(deathplace, forKey: .deathplace)
        try container.encode(hasAwards, forKey: .hasAwards)
        try container.encode(profession, forKey: .profession)
        try container.encode(facts, forKey: .facts)
        try container.encode(spouses, forKey: .spouses)
        try container.encode(films, forKey: .films)
    }
}

